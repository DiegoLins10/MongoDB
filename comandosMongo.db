-- inicia
mongo

-- mostra os bancos 
show dbs

-- seleciona o banco
use aula2

-- mostra todas as tables 
show tables
show collections

-- INSERT E CRIANÇA DE TABELAS
db.NomeCollection.insert({campo: "Diego",  rua: "rua porto da saudade"})

-- trazer os dados da collection
db.NomeCollection.find({campo: "Diego"})
db.megasena({Concurso: 73})

-- conta a quantidade de dados da table
db.megasena.count()

-- mostra os status da table
db.megasena.stats()

-- remove informação
db.albuns.remove({nome: "texto a ser localizado no documento"})

-- mostra os resultados em forma de json
db.megasena.find({Concurso: 73}).pretty();

-- procurar e aparecer uma
db.megasena.find({"Ganhadores_Sena": 5}, {Concurso:1})

-- procurar e aparecer duas colunas
db.megasena.find({"Ganhadores_Sena": 5}, {Concurso:1, Cidade:1})

-- escolhendo os campos que quero que apareça e fazendo o id não aparecer
db.megasena.find({Ganhadores_Sena:5}, {Concurso:true, _id:false})

-- criando uma nova table
db.ganhadores.insert({Concurso: 99999, CPF:12345678900, Nome: "Coffin Joe"})

-- usando upsert que verifica se já existe, se existir dá update, se não existir... dá um insert
db.ganhadores.update({Nome: "Mula sem cabeça"}, {$set: {CPF: 333333333333}}, {multi:0, upsert:1});

-- usando upsert que verifica todos os objetos e dá um update em todos que existir com o nome
db.ganhadores.update({Nome: "Mula sem cabeça"}, {$set: {CPF: 999999999}}, {multi:1, upsert:0});

-- obriga o usuario adicionar o CPF em ganhadores
db.runCommand({collMod: "ganhadores", validator: {"CPF":{$exist:true}}})

-- obriga o usuario colocar o email
db.runCommand({collMod: "ganhadores", validator: {"CPF":{$exist:true},{email: $regex: /@gmail\.com$/}}})

-- achar todos os sim ignorando letras minusculas e maisculas
db.megasena.find({"Acumulado":/sim/i}).count()

--achar todos os nomes que tem as
 db.albuns.find({"Nome": /as/})
 
 -- achar as palavras que iniciamm com mar
 db.albuns.find({"nome": /^mar/i},{"nome": 1, "_id":0})

-- apaga o banco todo
db.teste.drop();

-- importar um arquivo csv para o uma collection mongo db
mongoimport --db=mega --collection=megasena --type=csv --headerline --file=C:\Users\diego.lins\Desktop\teste\megasena.csv

--criando collection e limitando a 2 informações
db.createCollection("cacheDeDoisDocumentos", {capped: true, size: 4096, max: 2})

--SCHEMA DESIGN adicionando varios personagens
db.seriados.insert({ "_id":4, "nome":"Chaves", "personagens":[ "Seu Barriga", "Quico", "Chaves", "Chiquinha","Nhonho","Dona Florinda"]})

-- mapReduce
map = function() {  emit(this.Acumulado , this.Ganhadores_Sena );}

reduce = function(Acumulado, Ganhadores_Sena) {return Array.sum(Ganhadores_Sena); }

--collection ganhadores criando
result = db.runCommand({ "mapreduce" : "megasena", "map" : map, "reduce" : reduce, "out" : "ganhadores", "bypassDocumentValidation" : true })

• db.ganhadores.find();

--------------- ganhadores da quina -----------------------
map = function() {  emit(this.Acumulado , this.Ganhadores_Quina );}

reduce = function(Acumulado, Ganhadores_Quina) {return Array.sum(Ganhadores_Quina); }

result = db.runCommand({ "mapreduce" : "megasena", "map" : map, "reduce" : reduce, "out" : "ganhadores", "bypassDocumentValidation" : true })

 db.ganhadores.find();
 
 -- semelhante a avg e sum sql server
 db.megasena.aggregate({ $group: {_id: null,total: { $sum: 1 } , soma: { $sum: "$Ganhadores_Quina" } , avg: { $avg: "$Ganhadores_Quina" } } })
 
 
 -------------- metodo documentacao mongo ----------------
 db.posts.mapReduce( 
   function() { emit(this.user_id,1); }, 
	
   function(key, values) {return Array.sum(values)}, {  
      query:{status:"active"},  
      out:"post_total" 
   }
)


db.posts.mapReduce( 
   function() { emit(this.user_id,1); }, 
   function(key, values) {return Array.sum(values)}, {  
      query:{status:"active"},  
      out:"post_total" 
   }
	
).find()

---------------------------------------- FIM -------------------------------------------------------

